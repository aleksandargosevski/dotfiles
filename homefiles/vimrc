call plug#begin('~/.vim/plugged')

" Files buffers navigation
Plug 'scrooloose/nerdtree', { 'on': ['NERDTreeToggle', 'NERDTreeFind'] }
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'christoomey/vim-tmux-navigator'

" Search and movement
Plug 'mileszs/ack.vim'
Plug 'embear/vim-foldsearch', { 'on': ['Fs'] }
Plug 'easymotion/vim-easymotion'

" Git and command line
Plug 'tpope/vim-fugitive'

" Snippets and autocomplete
Plug 'neoclide/coc.nvim', {'branch': 'release'}

" Code edit
Plug 'mattn/emmet-vim'
Plug 'cohama/lexima.vim'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-commentary'
Plug 'editorconfig/editorconfig-vim'

" Color schemes
Plug 'danielwe/base16-vim'

" Add plugins to &runtimepath
call plug#end()

" ================================================
" Color scheme
" ================================================
let base16colorspace=256
set background=dark
execute "colorscheme base16-".$THEME

" ================================================
" General config
" ================================================
set relativenumber              "Line numbers are good
set number                      "Line numbers are good
set binary                      "don't add new line on end of file (git)
set gdefault                    "Set global flag for search and replace
set cursorline                  "Highlight row
set autoread                    "Reload files changed outside vim
set smartcase                   "Smart case search if there is uppercase
set ignorecase                  "case insensitive search
set hlsearch                    "highlight search results
set incsearch                   "show matches in real time
set clipboard+=unnamed          "use system clipboard
set fileencoding=utf-8          "Set utf-8 encoding on write
set encoding=utf-8              "for vim
set laststatus=0
set re=1                        "Faster vim with color schemes
set ruler                       "Show line/column number
set hidden                      "Switch buffers when they are not saved"
set belloff=all                 "turn off bells
set mouse=a                     "enable mouse
set lazyredraw                  "lazy redraw for macors
set timeoutlen=1000             "Fast escape
set ttimeoutlen=0               "Fast escape
set foldcolumn=0                "Hide fold column
set diffopt+=vertical           "Vertical diff
syntax on                       "Turn on syntax highlighting

" ================================================
" Colors
" ================================================
highlight clear FoldColumn                     "Use same color for padding as background
highlight LineNr ctermfg=19 ctermbg=NONE         "Change color of line numbers
highlight CursorLineNr ctermfg=20 ctermbg=19     "Change color of line numbers
highlight CursorLine ctermbg=19                  "Current line
highlight VertSplit ctermbg=NONE ctermfg=NONE    "Remove border background
highlight EndOfBuffer ctermfg=NONE ctermbg=NONE  "Color of ~ at end of the file
highlight SignColumn ctermbg=NONE                "Color of sign column (linter)
highlight Comment cterm=italic
highlight Keyword cterm=italic
highlight Special cterm=italic
highlight Statement cterm=italic
highlight Exception cterm=italic
highlight Function cterm=italic
hi clear CursorLineNR
hi clear CursorLine
hi Normal ctermbg=NONE guibg=NONE

" ================================================
" Cursor style in tmux
" ================================================
let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
let &t_SR = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=2\x7\<Esc>\\"
let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
let &t_8f="\<Esc>[38;2;%lu;%lu;%lum"
let &t_8b="\<Esc>[48;2;%lu;%lu;%lum"

" ================================================
" Indentation
" ================================================
set smarttab
set shiftwidth=4
set softtabstop=4
set tabstop=4
set expandtab
set smartindent
set autoindent

" ================================================
" Completion
" ================================================
set wildmode=list:full
set wildmenu
set wildignore=*.o,*.obj,*~
set wildignore+=*vim/backups*
set wildignore+=*sass-cache*
set wildignore+=*vendor/**
set wildignore+=*node_modules/**
set wildignore+=*DS_Store*
set wildignore+=*.gem
set wildignore+=log/**
set wildignore+=tmp/**
set wildignore+=*.png,*.jpg,*.gif

" ================================================
" Swap files
" ================================================
set noswapfile
set nobackup
set nowb

" ================================================
" Functions
" ================================================
function! FixFile()
    let l = line(".")
    let c = col(".")
    " Fix indentation
    exec "normal! gg=G"
    " Delete trailing slashes
    %s/\s\+$//e
    " Replace tabs with spaces
    %s/\t/    /e
    call cursor(l, c)
    set expandtab
endfunction

let $unrol=1
function! ToggleFold()
    if $unrol==0
        :exe "normal! zR"
        let $unrol=1
    else
        :Fs<CR>
        let $unrol=0
    endif
 endfunction

function! ToggleSyntax()
    if (exists("g:syntax_on"))
        syntax off
    else
        syntax enable
    endif
endfunction

function! NERDTreeToggleInCurDir()
    " If NERDTree is open in the current buffer
    if (exists("t:NERDTreeBufName") && bufwinnr(t:NERDTreeBufName) != -1)
        exe ":NERDTreeClose"
    else
        if (expand("%:t") != '')
            exe ":NERDTreeFind"
        else
            exe ":NERDTreeToggle"
        endif
    endif
endfunction

" Save cursor position when switching buffers
au BufLeave * let b:winview = winsaveview()
au BufEnter * if(exists('b:winview')) | call winrestview(b:winview) | endif

" ================================================
" Key mappings (bindings)
" ================================================
" Map leader
let mapleader = "\<Space>"

" Reload vim config
nnoremap <Leader><Leader>r :source ~/.vimrc<CR>

" ToggleSyntax
nnoremap <Leader><Leader>s :call ToggleSyntax()<CR>

" Notes
nnoremap <Leader>n :e ~/Google\ Drive/Notes/

" Paste and copy pasted
nnoremap <Leader>v viwpyiw

" Chords
nnoremap <Leader><Leader>c magg:vsplit<CR>:set noscrollbind<CR><C-w>l<C-f>:set scrollbind<CR><C-w>h:set scrollbind<CR>`a

" Close splits
nnoremap = :only<CR>

" Format json
nnoremap <Leader><Leader>j :%!python -m json.tool<CR>
vnoremap <Leader><Leader>j :!python -m json.tool<CR>

" Disable Ex mode
noremap Q <NOP>

" Copy file path
nnoremap <Leader>y :let @* = expand("%")<CR>

" Copy to the end of the line
nnoremap Y y$

" Line start and end
nnoremap L $
vnoremap L $h
nnoremap H ^
vnoremap H ^

" Quickfix and location lists
map <Leader>co :copen<CR>
map <Leader>cc :cclose<CR>
map <Leader>cn :cn<CR>
map <Leader>cp :cp<CR>
map <Leader>lo :lopen<CR>
map <Leader>lc :lclose<CR>

" Search selected
vnoremap // y/<C-R>"<CR>N

" Move selected
vnoremap J :m '>+1<CR>gv=gv
vnoremap K :m '<-2<CR>gv=gv

" Search under the cursor and back to that instance
nnoremap \ *N
" Search under the cursor and change it
nnoremap ' *Ncgn

" Easy command mode
nnoremap ; :
vnoremap ; :

" Switch between buffers quickly
map <Leader><Tab> <C-^>

" Delete buffer
nnoremap <Leader>x :bdelete<CR>

" Down is really the next line
nnoremap j gj
nnoremap k gk

" Delete content of the file
nnoremap <Leader>d ggdG
" Copy content of the file
nnoremap <Leader><Leader>y mpggVGy`p

" Add empty line and stay in command mode
nmap <Leader>j o<Esc>k
nmap <Leader>k O<Esc>j

" Save previous position
nnoremap gg mpgg
nnoremap G mpG
nnoremap / mp/

" Fast exit to normal mode
inoremap jj <Esc>
inoremap jk <Esc>

" Substitute
nnoremap <Leader>sr :%s///<left><left><C-f>i

" Fast save
nnoremap <Leader>w :w<CR>

" Fast quit
nnoremap <Leader>q :q<CR>

" Shorthand for making window smaller and bigger
nnoremap <Leader>, <C-w>10<
nnoremap <Leader>. <C-w>10>

" Hide highlight
nnoremap <silent> <BS> :noh<CR>

" Indenting in visual and normal mode
xnoremap <s-tab> <gv
xnoremap <tab> >gv
nnoremap <tab> >>
nnoremap <s-tab> <<

" Clear trailing whitespaces
nnoremap <Leader>i :call FixFile()<CR>

" Vue mappings
nnoremap <Leader>1 :e %<.vue<CR>
nnoremap <Leader>2 :e %<.js<CR>
nnoremap <Leader>3 :e %<.css<CR>

" ================================================
" Plugin settings and mappings (bindings)
" ================================================

" NERDTree
nnoremap - :call NERDTreeToggleInCurDir()<CR>
let NERDTreeMinimalUI = 1
let NERDTreeShowHidden=1

" Fzf
if isdirectory(".git")
    nnoremap <Leader>p :GFiles!<CR>
else
    nnoremap <Leader>p :Files!<CR>
endif
nnoremap <Leader><Leader>f :Rg!<CR>
nnoremap <Leader>o :Buffers!<CR>
nnoremap <Leader>[ :Files!<CR>
nnoremap <Leader>gf :Commits!<CR>
nnoremap <Leader>gh :BCommits!<CR>
nnoremap <Leader>m :Maps!<CR>
nnoremap <Leader>c :Commands!<CR>
nnoremap <Leader>\ :Filetypes!<CR>

" Fugitive commands
nnoremap <Leader>gst :Gstatus<CR>
nnoremap <Leader>gd :Gdiff<CR>
nnoremap <Leader>gb :Gblame<CR>
nnoremap <C-n> :echo fugitive#statusline()<CR>
nnoremap <Leader>gco :Gread<CR>:w<CR>

" Rg Search
let g:ackprg = 'rg -F -S --vimgrep'
nmap <Leader>f :Ack! "" ./<Left><Left><Left><Left>
nnoremap <Leader>a :Ack! <cword><CR>

" Fold searches
let g:foldsearch_disable_mappings=1
nnoremap , :call ToggleFold()<CR>

" Center highlighted search and show n/N
nnoremap n nzz
nnoremap N Nzz

" Easymotion
nmap s <Plug>(easymotion-bd-w)
nmap S <Plug>(easymotion-overwin-f2)
let g:EasyMotion_smartcase = 1

" Neosnippet
let g:neosnippet#disable_runtime_snippets = {'_' : 1}
let g:neosnippet#snippets_directory = '~/dotfiles/snippets'
imap <expr><TAB> neosnippet#expandable_or_jumpable() ? "\<Plug>(neosnippet_expand_or_jump)" : pumvisible() ? "\<C-n>" : "\<TAB>"
imap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<S-Tab>"
smap <expr><TAB> neosnippet#jumpable() ? "\<Plug>(neosnippet_jump)" : "\<TAB>"

" Coc
set nowritebackup
set cmdheight=2
set updatetime=300
set shortmess+=c
set signcolumn=number

let g:coc_user_config = {
      \ 'eslint.autoFixOnSave': v:true,
      \ }

let g:coc_global_extensions = [
      \ 'coc-json',
      \ 'coc-tsserver',
      \ 'coc-eslint',
      \ ]

" Use tab for trigger completion with characters ahead and navigate.
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current
" position. Coc only does snippet and additional edit on confirm.
" <cr> could be remapped by other vim plugin, try `:verbose imap <CR>`.
if exists('*complete_info')
  inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"
else
  inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
endif

" Use `[g` and `]g` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window.
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')

" Symbol renaming.
nmap <leader>rn <Plug>(coc-rename)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder.
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Add (Neo)Vim's native statusline support.
" NOTE: Please see `:h coc-status` for integrations with external plugins that
" provide custom statusline: lightline.vim, vim-airline.
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

" Coc snippets
inoremap <silent><expr> <TAB>
      \ pumvisible() ? coc#_select_confirm() :
      \ coc#expandableOrJumpable() ? "\<C-r>=coc#rpc#request('doKeymap', ['snippets-expand-jump',''])\<CR>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

let g:coc_snippet_next = '<tab>'
